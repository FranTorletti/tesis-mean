"use strict";var ApplicationConfiguration=function(){var applicationModuleName="tesis-mean",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("dependences"),ApplicationConfiguration.registerModule("resource-origins"),ApplicationConfiguration.registerModule("service-records"),ApplicationConfiguration.registerModule("service-types"),ApplicationConfiguration.registerModule("service-users"),ApplicationConfiguration.registerModule("services"),ApplicationConfiguration.registerModule("transaction-types"),ApplicationConfiguration.registerModule("transactions"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("dependences").run(["Menus",function(Menus){}]),angular.module("dependences").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDependences",{url:"/dependences",templateUrl:"modules/dependences/views/list-dependences.client.view.html"}).state("createDependence",{url:"/dependences/create",templateUrl:"modules/dependences/views/create-dependence.client.view.html"}).state("viewDependence",{url:"/dependences/:dependenceId",templateUrl:"modules/dependences/views/view-dependence.client.view.html"}).state("editDependence",{url:"/dependences/:dependenceId/edit",templateUrl:"modules/dependences/views/edit-dependence.client.view.html"})}]),angular.module("dependences").controller("DependencesController",["$scope","$stateParams","$location","Authentication","Dependences",function($scope,$stateParams,$location,Authentication,Dependences){function validForm(){return!$scope.dependence||$scope.dependence&&""==$scope.dependence.code?($scope.error="Please set the code. Code is empty",!1):!$scope.dependence||$scope.dependence&&""==$scope.dependence.description?($scope.error="Please set the description. Description is empty",!1):!0}$scope.authentication=Authentication,$scope.allChecked=!1,$scope.create=function(){if(validForm()){var dependence=new Dependences({code:this.dependence.code,description:this.dependence.description});dependence.$save(function(response){$location.path("dependences"),$scope.code="",$scope.description=""},function(errorResponse){console.log("errorResponse: ",errorResponse),$scope.error=errorResponse.data.message})}},$scope.resetForm=function(){$scope.dependence.code="",$scope.dependence.description=""},$scope.checked=function(dependence){"undefined"!=typeof dependence.checked&&dependence.checked?dependence.checked=!1:dependence.checked=!0},$scope.checkAll=function(){for(var value=!$scope.allChecked,i=$scope.dependences.length-1;i>=0;i--)$scope.dependences[i].checked=value},$scope.removeChecked=function(){var foundChecked=!1;for(var i in $scope.dependences)$scope.dependences[i].checked&&($scope.dependences[i].$remove(),$scope.dependences.splice(i,1),foundChecked=!0);console.log("found checked: ",foundChecked)},$scope.remove=function(dependence){dependence.$remove();for(var i in $scope.dependences)$scope.dependences[i]._id===dependence._id&&$scope.dependences.splice(i,1)},$scope.update=function(){var dependence=$scope.dependence;dependence.$update(function(){$location.path("dependences/"+dependence._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.dependences=Dependences.query()},$scope.findOne=function(){$scope.dependence=Dependences.get({dependenceId:$stateParams.dependenceId})}}]),angular.module("dependences").factory("Dependences",["$resource",function($resource){return $resource("dependences/:dependenceId",{dependenceId:"@_id"},{update:{method:"PUT"}})}]),angular.module("resource-origins").config(["$stateProvider",function($stateProvider){$stateProvider.state("listResourceOrigins",{url:"/resource-origins",templateUrl:"modules/resource-origins/views/list-resource-origins.client.view.html"}).state("createResourceOrigin",{url:"/resource-origins/create",templateUrl:"modules/resource-origins/views/create-resource-origin.client.view.html"}).state("viewResourceOrigin",{url:"/resource-origins/:resourceOriginId",templateUrl:"modules/resource-origins/views/view-resource-origin.client.view.html"}).state("editResourceOrigin",{url:"/resource-origins/:resourceOriginId/edit",templateUrl:"modules/resource-origins/views/edit-resource-origin.client.view.html"})}]),angular.module("resource-origins").controller("ResourceOriginsController",["$scope","$stateParams","$location","Authentication","ResourceOrigins",function($scope,$stateParams,$location,Authentication,ResourceOrigins){$scope.authentication=Authentication,$scope.create=function(){var resourceOrigin=new ResourceOrigins({name:this.name});resourceOrigin.$save(function(response){$location.path("resource-origins/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(resourceOrigin){if(resourceOrigin){resourceOrigin.$remove();for(var i in $scope.resourceOrigins)$scope.resourceOrigins[i]===resourceOrigin&&$scope.resourceOrigins.splice(i,1)}else $scope.resourceOrigin.$remove(function(){$location.path("resource-origins")})},$scope.update=function(){var resourceOrigin=$scope.resourceOrigin;resourceOrigin.$update(function(){$location.path("resource-origins/"+resourceOrigin._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.resourceOrigins=ResourceOrigins.query()},$scope.findOne=function(){$scope.resourceOrigin=ResourceOrigins.get({resourceOriginId:$stateParams.resourceOriginId})}}]),angular.module("resource-origins").factory("ResourceOrigins",["$resource",function($resource){return $resource("resource-origins/:resourceOriginId",{resourceOriginId:"@_id"},{update:{method:"PUT"}})}]),angular.module("service-records").run(["Menus",function(Menus){}]),angular.module("service-records").config(["$stateProvider",function($stateProvider){$stateProvider.state("listServiceRecords",{url:"/service-records",templateUrl:"modules/service-records/views/list-service-records.client.view.html"}).state("createServiceRecord",{url:"/service-records/create",templateUrl:"modules/service-records/views/create-service-record.client.view.html"}).state("viewServiceRecord",{url:"/service-records/:serviceRecordId",templateUrl:"modules/service-records/views/view-service-record.client.view.html"}).state("editServiceRecord",{url:"/service-records/:serviceRecordId/edit",templateUrl:"modules/service-records/views/edit-service-record.client.view.html"})}]),angular.module("service-records").controller("ServiceRecordsController",["$scope","$stateParams","$location","Authentication","ServiceRecords",function($scope,$stateParams,$location,Authentication,ServiceRecords){$scope.authentication=Authentication,$scope.create=function(){var serviceRecord=new ServiceRecords({name:this.name});serviceRecord.$save(function(response){$location.path("service-records/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(serviceRecord){if(serviceRecord){serviceRecord.$remove();for(var i in $scope.serviceRecords)$scope.serviceRecords[i]===serviceRecord&&$scope.serviceRecords.splice(i,1)}else $scope.serviceRecord.$remove(function(){$location.path("service-records")})},$scope.update=function(){var serviceRecord=$scope.serviceRecord;serviceRecord.$update(function(){$location.path("service-records/"+serviceRecord._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.serviceRecords=ServiceRecords.query()},$scope.findOne=function(){$scope.serviceRecord=ServiceRecords.get({serviceRecordId:$stateParams.serviceRecordId})}}]),angular.module("service-records").factory("ServiceRecords",["$resource",function($resource){return $resource("service-records/:serviceRecordId",{serviceRecordId:"@_id"},{update:{method:"PUT"}})}]),angular.module("service-types").run(["Menus",function(Menus){}]),angular.module("service-types").config(["$stateProvider",function($stateProvider){$stateProvider.state("listServiceTypes",{url:"/service-types",templateUrl:"modules/service-types/views/list-service-types.client.view.html"}).state("createServiceType",{url:"/service-types/create",templateUrl:"modules/service-types/views/create-service-type.client.view.html"}).state("viewServiceType",{url:"/service-types/:serviceTypeId",templateUrl:"modules/service-types/views/view-service-type.client.view.html"}).state("editServiceType",{url:"/service-types/:serviceTypeId/edit",templateUrl:"modules/service-types/views/edit-service-type.client.view.html"})}]),angular.module("service-types").controller("ServiceTypesController",["$scope","$stateParams","$location","Authentication","ServiceTypes",function($scope,$stateParams,$location,Authentication,ServiceTypes){$scope.authentication=Authentication,$scope.create=function(){var serviceType=new ServiceTypes({name:this.name});serviceType.$save(function(response){$location.path("service-types/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(serviceType){if(serviceType){serviceType.$remove();for(var i in $scope.serviceTypes)$scope.serviceTypes[i]===serviceType&&$scope.serviceTypes.splice(i,1)}else $scope.serviceType.$remove(function(){$location.path("service-types")})},$scope.update=function(){var serviceType=$scope.serviceType;serviceType.$update(function(){$location.path("service-types/"+serviceType._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.serviceTypes=ServiceTypes.query()},$scope.findOne=function(){$scope.serviceType=ServiceTypes.get({serviceTypeId:$stateParams.serviceTypeId})}}]),angular.module("service-types").factory("ServiceTypes",["$resource",function($resource){return $resource("service-types/:serviceTypeId",{serviceTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("service-users").run(["Menus",function(Menus){}]),angular.module("service-users").config(["$stateProvider",function($stateProvider){$stateProvider.state("listServiceUsers",{url:"/service-users",templateUrl:"modules/service-users/views/list-service-users.client.view.html"}).state("createServiceUser",{url:"/service-users/create",templateUrl:"modules/service-users/views/create-service-user.client.view.html"}).state("viewServiceUser",{url:"/service-users/:serviceUserId",templateUrl:"modules/service-users/views/view-service-user.client.view.html"}).state("editServiceUser",{url:"/service-users/:serviceUserId/edit",templateUrl:"modules/service-users/views/edit-service-user.client.view.html"})}]),angular.module("service-users").controller("ServiceUsersController",["$scope","$stateParams","$location","Authentication","ServiceUsers",function($scope,$stateParams,$location,Authentication,ServiceUsers){$scope.authentication=Authentication,$scope.create=function(){var serviceUser=new ServiceUsers({name:this.name});serviceUser.$save(function(response){$location.path("service-users/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(serviceUser){if(serviceUser){serviceUser.$remove();for(var i in $scope.serviceUsers)$scope.serviceUsers[i]===serviceUser&&$scope.serviceUsers.splice(i,1)}else $scope.serviceUser.$remove(function(){$location.path("service-users")})},$scope.update=function(){var serviceUser=$scope.serviceUser;serviceUser.$update(function(){$location.path("service-users/"+serviceUser._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.serviceUsers=ServiceUsers.query()},$scope.findOne=function(){$scope.serviceUser=ServiceUsers.get({serviceUserId:$stateParams.serviceUserId})}}]),angular.module("service-users").factory("ServiceUsers",["$resource",function($resource){return $resource("service-users/:serviceUserId",{serviceUserId:"@_id"},{update:{method:"PUT"}})}]),angular.module("services").run(["Menus",function(Menus){}]),angular.module("services").config(["$stateProvider",function($stateProvider){$stateProvider.state("listServices",{url:"/services",templateUrl:"modules/services/views/list-services.client.view.html"}).state("createService",{url:"/services/create",templateUrl:"modules/services/views/create-service.client.view.html"}).state("viewService",{url:"/services/:serviceId",templateUrl:"modules/services/views/view-service.client.view.html"}).state("editService",{url:"/services/:serviceId/edit",templateUrl:"modules/services/views/edit-service.client.view.html"})}]),angular.module("services").controller("ServicesController",["$scope","$stateParams","$location","Authentication","Services",function($scope,$stateParams,$location,Authentication,Services){$scope.authentication=Authentication,$scope.create=function(){var service=new Services({name:this.name});service.$save(function(response){$location.path("services/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(service){if(service){service.$remove();for(var i in $scope.services)$scope.services[i]===service&&$scope.services.splice(i,1)}else $scope.service.$remove(function(){$location.path("services")})},$scope.update=function(){var service=$scope.service;service.$update(function(){$location.path("services/"+service._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.services=Services.query()},$scope.findOne=function(){$scope.service=Services.get({serviceId:$stateParams.serviceId})}}]),angular.module("services").factory("Services",["$resource",function($resource){return $resource("services/:serviceId",{serviceId:"@_id"},{update:{method:"PUT"}})}]),angular.module("transaction-types").run(["Menus",function(Menus){}]),angular.module("transaction-types").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTransactionTypes",{url:"/transaction-types",templateUrl:"modules/transaction-types/views/list-transaction-types.client.view.html"}).state("createTransactionType",{url:"/transaction-types/create",templateUrl:"modules/transaction-types/views/create-transaction-type.client.view.html"}).state("viewTransactionType",{url:"/transaction-types/:transactionTypeId",templateUrl:"modules/transaction-types/views/view-transaction-type.client.view.html"}).state("editTransactionType",{url:"/transaction-types/:transactionTypeId/edit",templateUrl:"modules/transaction-types/views/edit-transaction-type.client.view.html"})}]),angular.module("transaction-types").controller("TransactionTypesController",["$scope","$stateParams","$location","Authentication","TransactionTypes",function($scope,$stateParams,$location,Authentication,TransactionTypes){$scope.authentication=Authentication,$scope.create=function(){var transactionType=new TransactionTypes({name:this.name});transactionType.$save(function(response){$location.path("transaction-types/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(transactionType){if(transactionType){transactionType.$remove();for(var i in $scope.transactionTypes)$scope.transactionTypes[i]===transactionType&&$scope.transactionTypes.splice(i,1)}else $scope.transactionType.$remove(function(){$location.path("transaction-types")})},$scope.update=function(){var transactionType=$scope.transactionType;transactionType.$update(function(){$location.path("transaction-types/"+transactionType._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.transactionTypes=TransactionTypes.query()},$scope.findOne=function(){$scope.transactionType=TransactionTypes.get({transactionTypeId:$stateParams.transactionTypeId})}}]),angular.module("transaction-types").factory("TransactionTypes",["$resource",function($resource){return $resource("transaction-types/:transactionTypeId",{transactionTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("transactions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTransactions",{url:"/transactions",templateUrl:"modules/transactions/views/list-transactions.client.view.html"}).state("createTransaction",{url:"/transactions/create",templateUrl:"modules/transactions/views/create-transaction.client.view.html"}).state("viewTransaction",{url:"/transactions/:transactionId",templateUrl:"modules/transactions/views/view-transaction.client.view.html"}).state("editTransaction",{url:"/transactions/:transactionId/edit",templateUrl:"modules/transactions/views/edit-transaction.client.view.html"})}]),angular.module("transactions").controller("TransactionsController",["$scope","$stateParams","$location","Authentication","Transactions",function($scope,$stateParams,$location,Authentication,Transactions){$scope.authentication=Authentication,$scope.create=function(){var transaction=new Transactions({name:this.name});transaction.$save(function(response){$location.path("transactions/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(transaction){if(transaction){transaction.$remove();for(var i in $scope.transactions)$scope.transactions[i]===transaction&&$scope.transactions.splice(i,1)}else $scope.transaction.$remove(function(){$location.path("transactions")})},$scope.update=function(){var transaction=$scope.transaction;transaction.$update(function(){$location.path("transactions/"+transaction._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.transactions=Transactions.query()},$scope.findOne=function(){$scope.transaction=Transactions.get({transactionId:$stateParams.transactionId})}}]),angular.module("transactions").factory("Transactions",["$resource",function($resource){return $resource("transactions/:transactionId",{transactionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);